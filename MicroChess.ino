/**
 * ArduinoChess.ino
 * 
 * the MicroChess project: https://github.com/ripred/MicroChess
 * 
 * written March 2023 - Trent M. Wyatt
 * 
 * version 1.0.0
 *   First base
 * 
 * version 1.1.0
 * Modified board_t to save 16 bytes
 * 
 * version 1.2.0
 * Added evaluation
 * 
 * version 1.3.0
 * Added storage for pieces and moves, printf adjustable print debugging
 * 
 * version 1.4.0
 * Added board traversal, pawn movements
 * 
 * version 1.5.0
 * Added knight movements
 * 
 * version 1.6.0
 * Added move execution
 * 
 * version 1.7.0
 * Major bug fixes in piece tracking and move generation
 * 
 * version 1.8.0
 * Added Rook, Bishop, Queen, and King move generation
 * Added 'in check' attributes
 * Added 'has moved' attributes
 * 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * version 1.9.0
 * 
 *  [+] fix and test the new Rook, Bishop, Queen, and King pieces
 *  [+] create new macro for printf that automatically declares the
 *      format string as a PROGMEM array behind the scenes without
 *      requiring a PROGMEM to be decared at each use of printf(...)!
 *  [+] replace all checks for Empty == getType(p) with isEmpty(p)
 *  [+] add the ability turn off all output in order to profile 
 *      the engine without waiting on serial i/o.
 *  [+] move the offsets into PROGMEM.
 *  [+] add pawn promotion to queen when reaching the last row.
 *  [+] move the move generation for each Piece type into it's own function.
 *  [+] create a separate file for each piece.
 *  [+] add precomputed tables for the material bonuses calculated by evaluate(...) at runtime.
 *  [+] add precomputed tables for the center bonuses calculated by evaluate(...) at runtime.
 *  [+] add the time spent and number of moves evaluated on the last move to the status area
 * 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * TODO: for version 1.10.0
 * 
 *  [+] get rid of move lists!
 *  [+] evaluate each move as it is generated by the pieces, remember the best one!
 *  [ ] change the api for the individual Piece generation functions so that
 *      the same "best move" move_t object is passed throughout and remove
 *      the best move objects from the main game_t!
 *
 *  [ ] add castling.
 *  [ ] update the show_move(...) function to properly display when a pawn executes 
 *      an en-passant capture.
 *  [ ] add and implement a "deleted" flag for pieces in the game.pieces[] list so they are ignored
 *      during moves that take pieces instead of needing to move/copy the taken piece from the list
 *  [ ] add ply level awareness and minimax algorithm.
 *  [ ] add alpha-beta pruning.
 *  [ ] add reading and writing of FEN notation.
 *  [ ] 
 * 
 * BUGBUGS: to fix!
 * 
 *  [ ] Empty piece in piece list error when ply > 0
 *  [ ] 
 * 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * 
 */
#include <Arduino.h>
#include <stdlib.h>

#include "MicroChess.h"

////////////////////////////////////////////////////////////////////////////////////////
// the game board
board_t board;

////////////////////////////////////////////////////////////////////////////////////////
// the currently running game
game_t game;


////////////////////////////////////////////////////////////////////////////////////////
// consider a move against the best white move or the best black move
// depending on the color of the piece and set this as the best move
// if it has a higher value (or an equal value when we're using random)
void consider_move(Color const side, index_t const from, index_t const to) 
{
    // make a move_t object for the move and evaluate it's value
    move_t move = { from, to, 0 };
    move.value = make_move(move, True);

    // trace the call
    print_t const dbg = Debug2;
    printf(dbg, "call to consider_move(%d, %2d, %2d, %5ld) = ", 
        side, from, to, move.value);

    if (print_level >= dbg) {
        show_move(move);
    }

    // if the move has a better value then set it as the new best move
    // (or equal move if adding randomness)
    if (White == side) {
        if (move.value > game.best_white_move.value) {
            game.best_white_move = move;
            printf(Debug2, "*\n");
        }
        else if (move.value == game.best_white_move.value) {
            if (game.options.random && (random() % 2)) {
                game.best_white_move = move;
                printf(Debug2, "*\n");
            }
        }
        else {
            printf(dbg, "\n");
        }
    }
    else {
        if (move.value < game.best_black_move.value) {
            game.best_black_move = move;
            printf(Debug2, "*\n");
        }
        else if (move.value == game.best_black_move.value) {
            if (game.options.random && (random() % 2)) {
                game.best_black_move = move;
                printf(Debug2, "*\n");
            }
        }
        else {
            printf(dbg, "\n");
        }
    }

}   // consider_move(Color side, index_t from, index_t to, long value)


long make_move(move_t const &move, Bool const restore) 
{
    game.stats.inc_moves_count();

    index_t const col = move.from % 8;
    index_t const row = move.from / 8;
    index_t const from = move.from;
    Piece   const p = board.get(from);
    Color   const side = getSide(p);
    Bool    const moved = hasMoved(p);

    index_t const to_col = move.to % 8;
    index_t const to_row = move.to / 8;
    index_t const to = move.to;
    Piece         op = board.get(to);
    Piece   const otype = getType(op);
    Color   const oside = getSide(op);

    // don't allow the kings to be taken
    if (King == otype) {
        if (White == side) {
            game.black_king_in_check = True;
            return MIN_VALUE;
        }
        game.white_king_in_check = True;
        return MAX_VALUE;
    }

    // for debugging; remove when finished validating capture restores
    // index_t const orig_piece_count = game.piece_count;

    // find piece in the list of pieces:
    index_t const piece_index = find_piece(from);
    if (piece_index < 0) {
        printf(Error, "\n"
            "error in make_move(...): could not find piece from move_t in pieces list: "
            "col = %d, row = %d\n\n",
            col, row);

        print_level = Debug1;
        show();
        show_stats();
        while ((1)) {}
    }

    // TODO: implement en-passant captures the way the other moves are implemented.
    // checks for en-passant:

    // if (type == Pawn && isEmpty(otype) && col != to_col) {  // en-passant capture
    //     if (White == side) { game.taken1[game.taken_count1++] = p; }
    //     else { game.taken2[game.taken_count2++] = p; }
    //     board.set(to_col + row * 8, Empty);
    // } else {
    //     if (!isEmpty(otype)) {
    //         // This move captures a piece
    //         if (White == side) { game.taken1[game.taken_count1++] = p; }
    //         else { game.taken2[game.taken_count2++] = op; }
    //     }
    // }

    // See if the destination is not empty and not a piece on our side.
    // i.e. an opponent's piece.
    index_t taken_index = -1;
    if (Empty != otype && side != oside) {
        // remember the piece index of the piece being taken
        taken_index = find_piece(to);

        // Decrement the piece count to point to the last entry
        game.piece_count--;

        // replace the taken piece in the piece list with the last piece
        // in the piece list (remove it).
        // ONLY if it is NOT the last piece in the list (that we just moved in the list)
        if (taken_index != piece_index) {
            game.pieces[taken_index] = game.pieces[game.piece_count];
        }

        // add the piece to the list of taken pieces
        if (White == side) {
            game.taken1[game.taken_count1++] = op;
        }
        else {
            game.taken2[game.taken_count2++] = op;
        }
    }

    // move our piece on the board
    board.set(from, Empty);

    // move our piece in the piece list
    game.pieces[piece_index] = { to_col, to_row };

    // promote the pawn to a queen if it reached the back row
    if (Pawn == getType(p) && (to_row == ((White == side) ? index_t(0) : index_t(7)))) {
        board.set(to, setMoved(setType(p, Queen), True));
    }
    else {
        board.set(to, setMoved(p, True));
    }

    // get the value of the board after the move(s)
    long value = evaluate();

    ////////////////////////////////////////////////////////////////////////////////////////
    // TODO: The move has been made.
    // Implement recursive look-ahead here.
    // Once that is working in brute-force mode,
    // implement minimax and alpha-beta pruning.
    ////////////////////////////////////////////////////////////////////////////////////////

    if (game.ply < game.options.maxply) {
        game.ply++;
        choose_best_move((game.turn + 1) % 2);
        game.ply--;
    }

    // if this move is just being evaluated then put the pieces back
    if (restore) {
        // if we took a piece then restore it
        if (taken_index != -1) {
            // restore the last piece in the piece list
            game.pieces[game.piece_count++] = game.pieces[taken_index];
            game.pieces[taken_index] = { to_col, to_row };

            // remove the piece from the taken pieces list
            if (White == side) {
                game.taken_count1--;
            }
            else {
                game.taken_count2--;
            }
        }

        // put the pieces back where they were on the board
        board.set(from, setMoved(p, moved));

        // put any piece back that we took and set it to being in check
        if (isEmpty(otype)) {
            board.set(to, Empty);
        }
        else if (side != oside) {
            op = setCheck(op, True);
            board.set(to, op);

            if (King == otype) {
                if (White == oside) {
                    game.white_king_in_check = True;
                }
                else {
                    game.black_king_in_check = True;
                }
            }
        }

        // restore the position of the piece we moved in the piece list
        game.pieces[piece_index] = { col, row };

        // if (orig_piece_count != game.piece_count) {
        //     printf(Error, 
        //         "error: orig_piece_count: %d != game.piece_count: %d\n\n", 
        //         orig_piece_count, game.piece_count);

        //     print_level = Debug1;
        //     show();
        //     show_stats();
        //     while ((1)) {}
        // }
    }

    return value;

}   // make_move(move_t const &move, Bool const restore)


////////////////////////////////////////////////////////////////////////////////////////
/// Evaluate the identity (score) of the board state.
/// Positive scores indicate an advantage for white and
/// Negative scores indicate an advantage for black.
long evaluate() 
{
    // flags choices for which attributes are included in the board score
    static uint8_t const material = 0x01u;
    static uint8_t const   center = 0x02u;
    // static uint8_t const mobility = 0x04u;

    // Adjust as desired
    // Note: Do not include mobility unless you are prepared to evaluate all moves
    // for both sides for future plies. On the first pass when neither side has any moves
    // this gives favor to White when the Black response moves have not been generated yet
    static uint8_t const   filter = material | center;

    // calculate the value of the board
    long materialTotal = 0L;
    long mobilityTotal = 0L;
    long centerTotal = 0L;
    long score = 0L;

    // iterate over the pieces on the board if necessary
    if (filter & (material | center)) {
        for (index_t piece_index = 0; piece_index < game.piece_count; piece_index++) {
            index_t const col = game.pieces[piece_index].x;
            index_t const row = game.pieces[piece_index].y;
            Piece   const p = board.get(col + row * 8);
            Piece   const ptype = getType(p);
            Color   const pside = getSide(p);

            if (filter & material) {
                // now uses pre-computed material bonus table for speed!
                materialTotal += pgm_read_dword(&material_bonus[ptype][pside]);
            }

            if (filter & center) { 
                // now uses pre-computed center bonus table for speed!
                centerTotal += (King == ptype) ? 0 :
                    (pgm_read_dword(&center_bonus[col][ptype][pside]) + 
                     pgm_read_dword(&center_bonus[row][ptype][pside]));
            }
        }
    }

    // The score or 'identity property' of the board can include extra points for
    // how many total moves (mobility) the remaining pieces can make
    // if (filter & mobility) {
    //     long sideFactor = (Black == side) ? -1 : 1;
    //     mobilityTotal += static_cast<long>(game.move_count1 * mobilityBonus * sideFactor);
    //     mobilityTotal -= static_cast<long>(game.move_count2 * mobilityBonus * sideFactor);
    // }

    score = materialTotal + centerTotal + mobilityTotal;

    // printf(Debug4, 
    //     "evaluation: %ld = centerTotal: %ld  materialTotal: %ld  mobilityTotal: %ld\n", 
    //     score, centerTotal, materialTotal, mobilityTotal);

    return score;

}   // evaluate()


////////////////////////////////////////////////////////////////////////////////////////
// find the piece index for a given board index
inline index_t find_piece(index_t const index) 
{
    // print_t constexpr dbg = Debug3;
    // printf(dbg, "find_piece(index: %2d) called, %2d total pieces\n", index, game.piece_count);

    for (index_t piece_index = 0; piece_index < game.piece_count; piece_index++) {
        point_t const &loc = game.pieces[piece_index];
        index_t const board_index = loc.x + loc.y * 8;

        // printf(print_t(dbg + 1), "game.pieces[%2d] = point_t(x:%d, y: %d) (%2d)\n", 
        //     piece_index, loc.x, loc.y, board_index);

        if (board_index == index) {
            // printf(print_t(dbg + 1), " returning %d\n", piece_index);
            return piece_index;
        }
    }

    return -1;

}   // find_piece(int const index)


////////////////////////////////////////////////////////////////////////////////////////
// reset the various move tracking flags
void reset_move_flags() 
{
    for (index_t ndx = 0; ndx < game.piece_count; ndx++) {
        index_t const col = game.pieces[ndx].x;
        index_t const row = game.pieces[ndx].y;
        index_t const from = col + row * 8;
        Piece   const p = board.get(from);

        board.set(from, setCheck(p, False));
    }

    // reset the king-in-check flags
    game.white_king_in_check = False;
    game.black_king_in_check = False;

    // reset the best moves
    game.best_white_move = { -1, -1, MIN_VALUE };
    game.best_black_move = { -1, -1, MAX_VALUE };

}   // reset_move_flags()


////////////////////////////////////////////////////////////////////////////////////////
// Evaluate all of the available moves for all pieces
move_t choose_best_move(Color const who) 
{
    static Bool constexpr   enable_pawns = True;
    static Bool constexpr enable_knights = True;
    static Bool constexpr enable_bishops = True;
    static Bool constexpr   enable_rooks = True;
    static Bool constexpr  enable_queens = True;
    static Bool constexpr   enable_kings = True;

    // walk through the pieces list and generate all moves for each piece
    for (index_t ndx = 0; ndx < game.piece_count; ndx++) {
        index_t const col = game.pieces[ndx].x;
        index_t const row = game.pieces[ndx].y;
        index_t const from = col + row * 8;
        Piece   const p = board.get(from);
        Color   const side = getSide(p);
        Piece   const type = getType(p);

        move_t move = { from, 0, 0 };

        // if (who != side) { continue; }
        
        // which direction is 'forward' is for this piece
        // index_t const fwd = (White == side) ? -1 : 1;

        printf(Debug3, "game.eval_ndx = %2d of %2d, point = %d,%d, %5s %s\n", 
            ndx, game.piece_count, col, row, getColor(p), getName(p));

        if (isEmpty(type)) {
            printf(Error, "error: Empty piece in piece list: game.eval_ndx = %d, board index = %d\n", 
                ndx, from);

            print_level = Debug1;
            show_pieces();
            show();
            show_stats();
            while ((1)) {}
        }

        switch (type) {
            case   Pawn: if ((enable_pawns))   { add_pawn_moves(  move); }  break;
            case Knight: if ((enable_knights)) { add_knight_moves(move); }  break;
            case Bishop: if ((enable_bishops)) { add_bishop_moves(move); }  break;
            case   Rook: if ((enable_rooks))   { add_rook_moves(  move); }  break;
            case  Queen: if ((enable_queens))  { add_queen_moves( move); }  break;
            case   King: if ((enable_kings))   { add_king_moves(  move); }  break;

            // case   Pawn: if ((enable_pawns))   { add_pawn_moves(p, from, fwd, side); }  break;
            // case Knight: if ((enable_knights)) { add_knight_moves( from, fwd, side); }  break;
            // case Bishop: if ((enable_bishops)) { add_bishop_moves( from, fwd, side); }  break;
            // case   Rook: if ((enable_rooks))   { add_rook_moves(   from, fwd, side); }  break;
            // case  Queen: if ((enable_queens))  { add_queen_moves(  from, fwd, side); }  break;
            // case   King: if ((enable_kings))   { add_king_moves(   from, fwd, side); }  break;

            // case   Pawn: add_pawn_moves(p, from, fwd, side); break;
            // case Knight: add_knight_moves( from, fwd, side); break;
            // case Bishop: add_bishop_moves( from, fwd, side); break;
            // case   Rook: add_rook_moves(   from, fwd, side); break;
            // case  Queen: add_queen_moves(  from, fwd, side); break;
            // case   King: add_king_moves(   from, fwd, side); break;

            default:
                printf(Error, "error: invalid type = %d\n", type);
                print_level = Debug1;
                show();
                show_stats();
                while ((1)) {}
                break;
        }
    }

    // return the best move for this side:
    return (White == who) ? game.best_white_move : game.best_black_move;

}   // choose_best_move()


////////////////////////////////////////////////////////////////////////////////////////
// play a game until reach a stalemate or checkmate
// 
void play_game() 
{
    show();

    Bool const whites_turn = White == game.turn;

    reset_move_flags();

    game.stats.start_move_stats();

    // determine our next best move
    printf(Debug3, "\n" "evaluating all available moves..\n\n");
    move_t const move = choose_best_move(game.turn);

    // see if we've hit the move limit
    static int const move_limit = 100;
    if (game.move_num >= move_limit) {
        printf(Debug1, "\n"
        "move limit of %d exceeded\n", move_limit);
        game.done = True;
        return;
    }

    // see if we have a stalemate
    Bool invalid_white_move = -1 == game.best_white_move.from;
    Bool invalid_black_move = -1 == game.best_black_move.from;

    if (invalid_white_move && invalid_black_move) {
        printf(Debug1, "\nStalemate!\n");
        game.done = True;
        return;
    }
    
    // see if the game has been won:
    if ((whites_turn && invalid_white_move) || (!whites_turn && invalid_black_move)) {
        printf(Debug1, "\nCheckmate!\n");
        game.done = True;

        if (invalid_white_move) {
            printf(Debug1, "\nWhite as no moves.\nBlack wins!\n");
        }
        else if (invalid_black_move) {
            printf(Debug1, "\nBlack as no moves.\nWhite wins!\n");
        } 

        return;
    }

    // Display the move that we chose:
    printf(Debug1, "\nMove #%d: ", game.move_num + 1);
    show_move(move);
    printf(Debug1, "\n");

    // Make the move:
    make_move(move, False);

    if (game.white_king_in_check) {
        printf(Debug1, "White King is in check!\n");
        if (White == game.turn) {
            printf(Debug1, "illegal move\n");
        }
    }

    if (game.black_king_in_check) {
        printf(Debug1, "Black King is in check!\n");
        if (Black == game.turn) {
            printf(Debug1, "illegal move\n");
        }
    }

    printf(Debug1, "\n");

    game.stats.stop_move_stats();

    game.last_move_time = game.stats.move_time;
    game.last_moves_evaluated = game.stats.moves_gen_move_delta;

    // remember the last move made
    game.last_move = move;

    // toggle whose turn it is
    ++game.turn %= 2;

    // increase the game moves counter
    game.move_num++;

}   // play_game()


void test_conv_t() {
    printf(Debug1, "sizeof(conv1_t): %zu\n", sizeof(conv1_t));
    conv1_t cnv1;
    cnv1.set_col(3);
    cnv1.set_row(5);
    printf(Debug1, "point: %d,%d index: %d\n", cnv1.get_col(), cnv1.get_row(), cnv1.get_index());

    printf(Debug1, "sizeof(conv2_t): %zu\n", sizeof(conv2_t));
    conv2_t cnv2;
    cnv2.set_from_col(3);
    cnv2.set_from_row(5);
    cnv2.set_to_col(7);
    cnv2.set_to_row(7);
    printf(Debug1, "from point: %d,%d index: %d to point: %d,%d index: %d\n", 
        cnv2.get_from_col(), cnv2.get_from_row(), cnv2.get_from_index(),
        cnv2.get_to_col(), cnv2.get_to_row(), cnv2.get_to_index());

}   // test_conv_t()


void set_game_options() {
    // set game.options.profiling to True (1) to disable output and profile the engine
    game.options.profiling = False;

    // set game.options.random to True (1) to use randomness in the game decisions
    game.options.random = False;

    // game hash - default to 4 hex prime numbers
    uint32_t seed = 0x232F89A3;
    uint16_t upper = seed >> 16;
    uint16_t lower = word(seed);

    // Enable random seed when program is debugged.
    // Disable random seed to reproduce issues or to profile.
    if (game.options.profiling) {
        printf(Debug1, "profiling. ");

        game.options.random = False;
        print_level = None;
    } 

    if (game.options.random) {
        // add a small degree of extra randomness from the environment
        seed += analogRead(A0) + analogRead(A1) + micros();
        upper = seed >> 16;
        lower = word(seed);
    }

    printf(Always, "game hash: 0x%04X%04X\n\n", upper, lower);

    randomSeed(seed);

}   // set_game_options()


////////////////////////////////////////////////////////////////////////////////////////
void setup() 
{
    Serial.begin(115200); while (!Serial); Serial.write('\n');

    Serial.println("starting..");

    // test_conv_t();

    set_game_options();

    game.stats.start_game_stats();

    // initialize the board and the game:
    board.init();
    game.init();

    do {
        play_game();

    } while (!game.done);

    game.stats.stop_game_stats();

    Serial.println("finished.\n");

    print_level = Debug1;

    // show the final board    
    show();

    // print out the game move counts and time statistics
    show_stats();

}   // setup()


////////////////////////////////////////////////////////////////////////////////////////
void loop() { }


////////////////////////////////////////////////////////////////////////////////////////
// display the game board
void show()
{
    static char const icons[] = "pnbrqkPNBRQK";

    static const bool dev = true;

    long value = 0;

    index_t const offset = 0;

    for (unsigned char y = 0; y < 8; ++y) {
        printf(Debug1, "%c ", dev ? ('0' + y) : ('8' - y));
        for (unsigned char x = 0; x < 8; ++x) {
            Piece const piece = board.get(y * 8 + x);
            printf(Debug1, " %c ", 
                isEmpty(piece) ? ((y ^ x) & 1 ? '.' : '*') :
                icons[((getSide(piece) * 6) + getType(piece) - 1)]);
        }

        // display the extra status info on certain lines:
        switch (y) {
            // display the last move made if available
            case offset + 0:
                if (game.last_move.from != -1 && game.last_move.to != -1) {
                    printf(Debug1, "    Last Move: %c%c to %c%c", 
                        (game.last_move.from % 8) + 'A', 
                        '8' - (game.last_move.from / 8), 
                        (game.last_move.to   % 8) + 'A', 
                        '8' - (game.last_move.to   / 8) );
                }
                break;

            // display the time spent on the last move
            case offset + 1:
                if (0 == game.last_move_time) break;
                if (0 != game.last_moves_evaluated) {
                    // subtract 1 from the number of moves to not include the actual
                    // final move chosen in the count (it was already counted during consideration)
                    uint32_t num_moves = game.last_moves_evaluated - 1;
                    double const moves_per_sec = num_moves / (game.last_move_time / 1000.0);

                    char str_moves[16] = "";
                    strcpy(str_moves, addCommas(num_moves));

                    char str_moves_per_sec[16] = "";
                    strcpy(str_moves_per_sec, addCommas(moves_per_sec));

                    printf(Debug1, "    %s moves in %lu ms (%s moves/sec)", 
                        str_moves, game.last_move_time, str_moves_per_sec);
                }
                break;

            // display the number of moves evaluated on the last move
            // case offset + 2:
            //     if (0 == game.last_moves_evaluated) break;
            //     printf(Debug1, "    Moves evaluated: %s", addCommas(game.last_moves_evaluated));
            //     break;

            // display the pieces taken by White
            case offset + 4:
                printf(Debug1, "    Taken %d: ", 1);
                for (int i = 0; i < game.taken_count1; i++) {
                    char c = icons[(getSide(game.taken1[i]) * 6) + getType(game.taken1[i]) - 1];
                    printf(Debug1, "%c ", c);
                }
                break;

            // display the pieces taken by Black
            case offset + 5:
                printf(Debug1, "    Taken %d: ", 2);
                for (int i = 0; i < game.taken_count2; i++) {
                    char c = icons[(getSide(game.taken2[i]) * 6) + getType(game.taken2[i]) - 1];
                    printf(Debug1, "%c ", c);
                }
                break;

            // display the current score
            case offset + 7:
                value = evaluate();
                printf(Debug1, "    Board value: %8ld %s", value, (value == 0) ? "" : 
                    (value  < 0) ? "Black's favor" : "White's favor");
                break;
        }
        printf(Debug1, "%c", '\n');
    }
    printf(Debug1, "%s", 
        dev ? "   0  1  2  3  4  5  6  7\n\n" : "   A  B  C  D  E  F  G  H\n");

}   // show()